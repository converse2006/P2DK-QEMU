=head1 NAME

qemu-doc - QEMU Emulator User Documentation

=head1 SYNOPSIS

usage: qemu [options] [I<disk_image>]

=head1 DESCRIPTION


The QEMU PC System emulator simulates the
following peripherals:


=over 4


=item -

i440FX host PCI bridge and PIIX3 PCI to ISA bridge

=item -

Cirrus CLGD 5446 PCI VGA card or dummy VGA card with Bochs VESA
extensions (hardware level, including all non standard modes).

=item -

PS/2 mouse and keyboard

=item -

2 PCI IDE interfaces with hard disk and CD-ROM support

=item -

Floppy disk

=item -

PCI and ISA network adapters

=item -

Serial ports

=item -

Creative SoundBlaster 16 sound card

=item -

ENSONIQ AudioPCI ES1370 sound card

=item -

Intel 82801AA AC97 Audio compatible sound card

=item -

Adlib(OPL2) - Yamaha YM3812 compatible chip

=item -

Gravis Ultrasound GF1 sound card

=item -

CS4231A compatible sound card

=item -

PCI UHCI USB controller and a virtual USB hub.

=back


SMP is supported with up to 255 CPUs.

Note that adlib, gus and cs4231a are only available when QEMU was
configured with --audio-card-list option containing the name(s) of
required card(s).

QEMU uses the PC BIOS from the Bochs project and the Plex86/Bochs LGPL
VGA BIOS.

QEMU uses YM3812 emulation by Tatsuyuki Satoh.

QEMU uses GUS emulation(GUSEMU32 E<lt>B<http://www.deinmeister.de/gusemu/>E<gt>)
by Tibor "TS" Sch√ºtz.

Not that, by default, GUS shares IRQ(7) with parallel ports and so
qemu must be told to not have parallel ports to have working GUS

	
	qemu dos.img -soundhw gus -parallel none


Alternatively:
	
	qemu dos.img -device gus,irq=5


Or some other unclaimed IRQ.

CS4231A is the chip used in Windows Sound System and GUSMAX products


=head1 OPTIONS

I<disk_image> is a raw hard disk image for IDE hard disk 0. Some
targets do not need a disk image.

Standard options:

=over 4


=item B<-h>

Display help and exit

=item B<-version>

Display version information and exit

=item B<-M> I<machine>

Select the emulated I<machine> (C<-M ?> for list)

=item B<-cpu> I<model>

Select CPU model (-cpu ? for list and additional feature selection)

=item B<-smp> I<n>B<[,cores=>I<cores>B<][,threads=>I<threads>B<][,sockets=>I<sockets>B<][,maxcpus=>I<maxcpus>B<]>

Simulate an SMP system with I<n> CPUs. On the PC target, up to 255
CPUs are supported. On Sparc32 target, Linux limits the number of usable CPUs
to 4.
For the PC target, the number of I<cores> per socket, the number
of I<threads> per cores and the total number of I<sockets> can be
specified. Missing values will be computed. If any on the three values is
given, the total number of CPUs I<n> can be omitted. I<maxcpus>
specifies the maximum number of hotpluggable CPUs.

=item B<-numa> I<opts>

Simulate a multi node NUMA system. If mem and cpus are omitted, resources
are split equally.

=item B<-fda> I<file>


=item B<-fdb> I<file>

Use I<file> as floppy disk 0/1 image. You can
use the host floppy by using F</dev/fd0> as filename.

=item B<-hda> I<file>


=item B<-hdb> I<file>


=item B<-hdc> I<file>


=item B<-hdd> I<file>

Use I<file> as hard disk 0, 1, 2 or 3 image.

=item B<-cdrom> I<file>

Use I<file> as CD-ROM image (you cannot use B<-hdc> and
B<-cdrom> at the same time). You can use the host CD-ROM by
using F</dev/cdrom> as filename.

=item B<-drive> I<option>B<[,>I<option>B<[,>I<option>B<[,...]]]>


Define a new drive. Valid options are:


=over 4


=item B<file=>I<file>

This option defines which disk image to use with
this drive. If the filename contains comma, you must double it
(for instance, "file=my,,file" to use file "my,file").

=item B<if=>I<interface>

This option defines on which type on interface the drive is connected.
Available types are: ide, scsi, sd, mtd, floppy, pflash, virtio.

=item B<bus=>I<bus>B<,unit=>I<unit>

These options define where is connected the drive by defining the bus number and
the unit id.

=item B<index=>I<index>

This option defines where is connected the drive by using an index in the list
of available connectors of a given interface type.

=item B<media=>I<media>

This option defines the type of the media: disk or cdrom.

=item B<cyls=>I<c>B<,heads=>I<h>B<,secs=>I<s>B<[,trans=>I<t>B<]>

These options have the same definition as they have in B<-hdachs>.

=item B<snapshot=>I<snapshot>

I<snapshot> is "on" or "off" and allows to enable snapshot for given drive (see B<-snapshot>).

=item B<cache=>I<cache>

I<cache> is "none", "writeback", "unsafe", or "writethrough" and controls how the host cache is used to access block data.

=item B<aio=>I<aio>

I<aio> is "threads", or "native" and selects between pthread based disk I/O and native Linux AIO.

=item B<format=>I<format>

Specify which disk I<format> will be used rather than detecting
the format.  Can be used to specifiy format=raw to avoid interpreting
an untrusted format header.

=item B<serial=>I<serial>

This option specifies the serial number to assign to the device.

=item B<addr=>I<addr>

Specify the controller's PCI address (if=virtio only).

=back


By default, writethrough caching is used for all block device.  This means that
the host page cache will be used to read and write data but write notification
will be sent to the guest only when the data has been reported as written by
the storage subsystem.

Writeback caching will report data writes as completed as soon as the data is
present in the host page cache.  This is safe as long as you trust your host.
If your host crashes or loses power, then the guest may experience data
corruption.

The host page cache can be avoided entirely with B<cache=none>.  This will
attempt to do disk IO directly to the guests memory.  QEMU may still perform
an internal copy of the data.

Some block drivers perform badly with B<cache=writethrough>, most notably,
qcow2.  If performance is more important than correctness,
B<cache=writeback> should be used with qcow2.

In case you don't care about data integrity over host failures, use
cache=unsafe. This option tells qemu that it never needs to write any data
to the disk but can instead keeps things in cache. If anything goes wrong,
like your host losing power, the disk storage getting disconnected accidently,
etc. you're image will most probably be rendered unusable.   When using
the B<-snapshot> option, unsafe caching is always used.

Instead of B<-cdrom> you can use:
	
	qemu -drive file=file,index=2,media=cdrom


Instead of B<-hda>, B<-hdb>, B<-hdc>, B<-hdd>, you can
use:
	
	qemu -drive file=file,index=0,media=disk
	qemu -drive file=file,index=1,media=disk
	qemu -drive file=file,index=2,media=disk
	qemu -drive file=file,index=3,media=disk


You can connect a CDROM to the slave of ide0:
	
	qemu -drive file=file,if=ide,index=1,media=cdrom


If you don't specify the "file=" argument, you define an empty drive:
	
	qemu -drive if=ide,index=1,media=cdrom


You can connect a SCSI disk with unit ID 6 on the bus #0:
	
	qemu -drive file=file,if=scsi,bus=0,unit=6


Instead of B<-fda>, B<-fdb>, you can use:
	
	qemu -drive file=file,index=0,if=floppy
	qemu -drive file=file,index=1,if=floppy


By default, I<interface> is "ide" and I<index> is automatically
incremented:
	
	qemu -drive file=a -drive file=b"

is interpreted like:
	
	qemu -hda a -hdb b


=item B<-set>

TODO

=item B<-global>

TODO

=item B<-mtdblock> I<file>

Use I<file> as on-board Flash memory image.

=item B<-sd> I<file>

Use I<file> as SecureDigital card image.

=item B<-pflash> I<file>

Use I<file> as a parallel flash image.

=item B<-boot [order=>I<drives>B<][,once=>I<drives>B<][,menu=on|off]>

Specify boot order I<drives> as a string of drive letters. Valid
drive letters depend on the target achitecture. The x86 PC uses: a, b
(floppy 1 and 2), c (first hard disk), d (first CD-ROM), n-p (Etherboot
from network adapter 1-4), hard disk boot is the default. To apply a
particular boot order only on the first startup, specify it via
B<once>.

Interactive boot menus/prompts can be enabled via B<menu=on> as far
as firmware/BIOS supports them. The default is non-interactive boot.

	
	# try to boot from network first, then from hard disk
	qemu -boot order=nc
	# boot from CD-ROM first, switch back to default order after reboot
	qemu -boot once=d


Note: The legacy format '-boot I<drives>' is still supported but its
use is discouraged as it may be removed from future versions.

=item B<-snapshot>

Write to temporary files instead of disk image files. In this case,
the raw disk image you use is not written back. You can however force
the write back by pressing B<C-a s>.

=item B<-m> I<megs>

Set virtual RAM size to I<megs> megabytes. Default is 128 MiB.  Optionally,
a suffix of "M" or "G" can be used to signify a value in megabytes or
gigabytes respectively.

=item B<-mem-path> I<path>

Allocate guest RAM from a temporarily created file in I<path>.

=item B<-mem-prealloc>

Preallocate memory when using -mem-path.

=item B<-k> I<language>

Use keyboard layout I<language> (for example C<fr> for
French). This option is only needed where it is not easy to get raw PC
keycodes (e.g. on Macs, with some X11 servers or with a VNC
display). You don't normally need to use it on PC/Linux or PC/Windows
hosts.

The available layouts are:
	
	ar  de-ch  es  fo     fr-ca  hu  ja  mk     no  pt-br  sv
	da  en-gb  et  fr     fr-ch  is  lt  nl     pl  ru     th
	de  en-us  fi  fr-be  hr     it  lv  nl-be  pt  sl     tr


The default is C<en-us>.

=item B<-audio-help>

Will show the audio subsystem help: list of drivers, tunable
parameters.

=item B<-soundhw> I<card1>B<[,>I<card2>B<,...] or -soundhw all>

Enable audio and selected sound hardware. Use ? to print all
available sound hardware.

	
	qemu -soundhw sb16,adlib disk.img
	qemu -soundhw es1370 disk.img
	qemu -soundhw ac97 disk.img
	qemu -soundhw all disk.img
	qemu -soundhw ?


Note that Linux's i810_audio OSS kernel (for AC97) module might
require manually specifying clocking.

	
	modprobe i810_audio clocking=48000


=back

USB options:

=over 4



=item B<-usb>

Enable the USB driver (will be the default soon)


=item B<-usbdevice> I<devname>

Add the USB device I<devname>. 


=over 4



=item B<mouse>

Virtual Mouse. This will override the PS/2 mouse emulation when activated.


=item B<tablet>

Pointer device that uses absolute coordinates (like a touchscreen). This
means qemu is able to report the mouse position without having to grab the
mouse. Also overrides the PS/2 mouse emulation when activated.


=item B<disk:[format=>I<format>B<]:>I<file>

Mass storage device based on file. The optional I<format> argument
will be used rather than detecting the format. Can be used to specifiy
C<format=raw> to avoid interpreting an untrusted format header.


=item B<host:>I<bus>B<.>I<addr>

Pass through the host device identified by I<bus>.I<addr> (Linux only).


=item B<host:>I<vendor_id>B<:>I<product_id>

Pass through the host device identified by I<vendor_id>:I<product_id>
(Linux only).


=item B<serial:[vendorid=>I<vendor_id>B<][,productid=>I<product_id>B<]:>I<dev>

Serial converter to host character device I<dev>, see C<-serial> for the
available devices.


=item B<braille>

Braille device.  This will use BrlAPI to display the braille output on a real
or fake device.


=item B<net:>I<options>

Network adapter that supports CDC ethernet and RNDIS protocols.


=back


=item B<-device> I<driver>B<[,>I<prop>B<[=>I<value>B<][,...]]>

Add device I<driver>.  I<prop>=I<value> sets driver
properties.  Valid properties depend on the driver.  To get help on
possible drivers and properties, use C<-device ?> and
C<-device I<driver>,?>.
File system options:

The general form of a File system device option is:

=over 4



=item B<-fsdev> I<fstype> B<,id=>I<id> B<[,>I<options>B<]>

Fstype is one of:
B<local>,
The specific Fstype will determine the applicable options.

Options to each backend are described below.


=item B<-fsdev local ,id=>I<id> B<,path=>I<path> B<,security_model=>I<security_model>


Create a file-system-"device" for local-filesystem.

B<local> is only available on Linux.

B<path> specifies the path to be exported. B<path> is required.

B<security_model> specifies the security model to be followed.
B<security_model> is required.


=back

Virtual File system pass-through options:

The general form of a Virtual File system pass-through option is:

=over 4



=item B<-virtfs> I<fstype> B<[,>I<options>B<]>

Fstype is one of:
B<local>,
The specific Fstype will determine the applicable options.

Options to each backend are described below.


=item B<-virtfs local ,path=>I<path> B<,mount_tag=>I<mount_tag> B<,security_model=>I<security_model>


Create a Virtual file-system-pass through for local-filesystem.

B<local> is only available on Linux.

B<path> specifies the path to be exported. B<path> is required.

B<security_model> specifies the security model to be followed.
B<security_model> is required.


B<mount_tag> specifies the tag with which the exported file is mounted.
B<mount_tag> is required.


=back



=item B<-name> I<name>

Sets the I<name> of the guest.
This name will be displayed in the SDL window caption.
The I<name> will also be used for the VNC server.
Also optionally set the top visible process name in Linux.

=item B<-uuid> I<uuid>

Set system UUID.

=back


Display options:

=over 4


=item B<-nographic>

Normally, QEMU uses SDL to display the VGA output. With this option,
you can totally disable graphical output so that QEMU is a simple
command line application. The emulated serial port is redirected on
the console. Therefore, you can still use QEMU to debug a Linux kernel
with a serial console.

=item B<-curses>

Normally, QEMU uses SDL to display the VGA output.  With this option,
QEMU can display the VGA output when in text mode using a
curses/ncurses interface.  Nothing is displayed in graphical mode.

=item B<-no-frame>

Do not use decorations for SDL windows and start them using the whole
available screen space. This makes the using QEMU in a dedicated desktop
workspace more convenient.

=item B<-alt-grab>

Use Ctrl-Alt-Shift to grab mouse (instead of Ctrl-Alt).

=item B<-ctrl-grab>

Use Right-Ctrl to grab mouse (instead of Ctrl-Alt).

=item B<-no-quit>

Disable SDL window close capability.

=item B<-sdl>

Enable SDL.

=item B<-portrait>

Rotate graphical output 90 deg left (only PXA LCD).

=item B<-vga> I<type>

Select type of VGA card to emulate. Valid values for I<type> are

=over 4


=item B<cirrus>

Cirrus Logic GD5446 Video card. All Windows versions starting from
Windows 95 should recognize and use this graphic card. For optimal
performances, use 16 bit color depth in the guest and the host OS.
(This one is the default)

=item B<std>

Standard VGA card with Bochs VBE extensions.  If your guest OS
supports the VESA 2.0 VBE extensions (e.g. Windows XP) and if you want
to use high resolution modes (E<gt>= 1280x1024x16) then you should use
this option.

=item B<vmware>

VMWare SVGA-II compatible adapter. Use it if you have sufficiently
recent XFree86/XOrg server or Windows guest with a driver for this
card.

=item B<none>

Disable VGA card.

=back


=item B<-full-screen>

Start in full screen.

=item B<-g> I<width>B<x>I<height>B<[x>I<depth>B<]>

Set the initial graphical resolution and depth (PPC, SPARC only).

=item B<-vnc> I<display>B<[,>I<option>B<[,>I<option>B<[,...]]]>

Normally, QEMU uses SDL to display the VGA output.  With this option,
you can have QEMU listen on VNC display I<display> and redirect the VGA
display over the VNC session.  It is very useful to enable the usb
tablet device when using this option (option B<-usbdevice
tablet>). When using the VNC display, you must use the B<-k>
parameter to set the keyboard layout if you are not using en-us. Valid
syntax for the I<display> is


=over 4



=item I<host>B<:>I<d>


TCP connections will only be allowed from I<host> on display I<d>.
By convention the TCP port is 5900+I<d>. Optionally, I<host> can
be omitted in which case the server will accept connections from any host.


=item B<unix:>I<path>


Connections will be allowed over UNIX domain sockets where I<path> is the
location of a unix socket to listen for connections on.


=item B<none>


VNC is initialized but not started. The monitor C<change> command
can be used to later start the VNC server.


=back


Following the I<display> value there may be one or more I<option> flags
separated by commas. Valid options are


=over 4



=item B<reverse>


Connect to a listening VNC client via a "reverse" connection. The
client is specified by the I<display>. For reverse network
connections (I<host>:I<d>,C<reverse>), the I<d> argument
is a TCP port number, not a display number.


=item B<password>


Require that password based authentication is used for client connections.
The password must be set separately using the C<change> command in the
B<pcsys_monitor>


=item B<tls>


Require that client use TLS when communicating with the VNC server. This
uses anonymous TLS credentials so is susceptible to a man-in-the-middle
attack. It is recommended that this option be combined with either the
B<x509> or B<x509verify> options.


=item B<x509=>I</path/to/certificate/dir>


Valid if B<tls> is specified. Require that x509 credentials are used
for negotiating the TLS session. The server will send its x509 certificate
to the client. It is recommended that a password be set on the VNC server
to provide authentication of the client when this is used. The path following
this option specifies where the x509 certificates are to be loaded from.
See the B<vnc_security> section for details on generating certificates.


=item B<x509verify=>I</path/to/certificate/dir>


Valid if B<tls> is specified. Require that x509 credentials are used
for negotiating the TLS session. The server will send its x509 certificate
to the client, and request that the client send its own x509 certificate.
The server will validate the client's certificate against the CA certificate,
and reject clients when validation fails. If the certificate authority is
trusted, this is a sufficient authentication mechanism. You may still wish
to set a password on the VNC server as a second authentication layer. The
path following this option specifies where the x509 certificates are to
be loaded from. See the B<vnc_security> section for details on generating
certificates.


=item B<sasl>


Require that the client use SASL to authenticate with the VNC server.
The exact choice of authentication method used is controlled from the
system / user's SASL configuration file for the 'qemu' service. This
is typically found in /etc/sasl2/qemu.conf. If running QEMU as an
unprivileged user, an environment variable SASL_CONF_PATH can be used
to make it search alternate locations for the service config.
While some SASL auth methods can also provide data encryption (eg GSSAPI),
it is recommended that SASL always be combined with the 'tls' and
'x509' settings to enable use of SSL and server certificates. This
ensures a data encryption preventing compromise of authentication
credentials. See the B<vnc_security> section for details on using
SASL authentication.


=item B<acl>


Turn on access control lists for checking of the x509 client certificate
and SASL party. For x509 certs, the ACL check is made against the
certificate's distinguished name. This is something that looks like
C<C=GB,O=ACME,L=Boston,CN=bob>. For SASL party, the ACL check is
made against the username, which depending on the SASL plugin, may
include a realm component, eg C<bob> or C<bob@EXAMPLE.COM>.
When the B<acl> flag is set, the initial access list will be
empty, with a C<deny> policy. Thus no one will be allowed to
use the VNC server until the ACLs have been loaded. This can be
achieved using the C<acl> monitor command.


=item B<lossy>


Enable lossy compression methods (gradient, JPEG, ...). If this
option is set, VNC client may receive lossy framebuffer updates
depending on its encoding settings. Enabling this option can save
a lot of bandwidth at the expense of quality.


=back


=back


i386 target only:

=over 4


=item B<-win2k-hack>

Use it when installing Windows 2000 to avoid a disk full bug. After
Windows 2000 is installed, you no longer need this option (this option
slows down the IDE transfers).

=item B<-no-fd-bootchk>

Disable boot signature checking for floppy disks in Bochs BIOS. It may
be needed to boot from old floppy disks.
TODO: check reference to Bochs BIOS.

=item B<-no-acpi>

Disable ACPI (Advanced Configuration and Power Interface) support. Use
it if your guest OS complains about ACPI problems (PC target machine
only).

=item B<-no-hpet>

Disable HPET support.

=item B<-balloon none>

Disable balloon device.

=item B<-balloon virtio[,addr=>I<addr>B<]>

Enable virtio balloon device (default), optionally with PCI address
I<addr>.

=item B<-acpitable [sig=>I<str>B<][,rev=>I<n>B<][,oem_id=>I<str>B<][,oem_table_id=>I<str>B<][,oem_rev=>I<n>B<] [,asl_compiler_id=>I<str>B<][,asl_compiler_rev=>I<n>B<][,data=>I<file1>B<[:>I<file2>B<]...]>

Add ACPI table with specified header fields and context from specified files.

=item B<-smbios file=>I<binary>

Load SMBIOS entry from binary file.


=item B<-smbios type=0[,vendor=>I<str>B<][,version=>I<str>B<][,date=>I<str>B<][,release=>I<%d.%d>B<]>

Specify SMBIOS type 0 fields


=item B<-smbios type=1[,manufacturer=>I<str>B<][,product=>I<str>B<] [,version=>I<str>B<][,serial=>I<str>B<][,uuid=>I<uuid>B<][,sku=>I<str>B<] [,family=>I<str>B<]>

Specify SMBIOS type 1 fields


=back

Network options:

=over 4


=item B<-net nic[,vlan=>I<n>B<][,macaddr=>I<mac>B<][,model=>I<type>B<] [,name=>I<name>B<][,addr=>I<addr>B<][,vectors=>I<v>B<]>

Create a new Network Interface Card and connect it to VLAN I<n> (I<n>
= 0 is the default). The NIC is an e1000 by default on the PC
target. Optionally, the MAC address can be changed to I<mac>, the
device address set to I<addr> (PCI cards only),
and a I<name> can be assigned for use in monitor commands.
Optionally, for PCI cards, you can specify the number I<v> of MSI-X vectors
that the card should have; this option currently only affects virtio cards; set
I<v> = 0 to disable MSI-X. If no B<-net> option is specified, a single
NIC is created.  Qemu can emulate several different models of network card.
Valid values for I<type> are
C<virtio>, C<i82551>, C<i82557b>, C<i82559er>,
C<ne2k_pci>, C<ne2k_isa>, C<pcnet>, C<rtl8139>,
C<e1000>, C<smc91c111>, C<lance> and C<mcf_fec>.
Not all devices are supported on all targets.  Use -net nic,model=?
for a list of available devices for your target.


=item B<-net user[,>I<option>B<][,>I<option>B<][,...]>

Use the user mode network stack which requires no administrator
privilege to run. Valid options are:


=over 4


=item B<vlan=>I<n>

Connect user mode stack to VLAN I<n> (I<n> = 0 is the default).


=item B<name=>I<name>

Assign symbolic name for use in monitor commands.


=item B<net=>I<addr>B<[/>I<mask>B<]>

Set IP network address the guest will see. Optionally specify the netmask,
either in the form a.b.c.d or as number of valid top-most bits. Default is
10.0.2.0/8.


=item B<host=>I<addr>

Specify the guest-visible address of the host. Default is the 2nd IP in the
guest network, i.e. x.x.x.2.


=item B<restrict=y|yes|n|no>

If this options is enabled, the guest will be isolated, i.e. it will not be
able to contact the host and no guest IP packets will be routed over the host
to the outside. This option does not affect explicitly set forwarding rule.


=item B<hostname=>I<name>

Specifies the client hostname reported by the builtin DHCP server.


=item B<dhcpstart=>I<addr>

Specify the first of the 16 IPs the built-in DHCP server can assign. Default
is the 16th to 31st IP in the guest network, i.e. x.x.x.16 to x.x.x.31.


=item B<dns=>I<addr>

Specify the guest-visible address of the virtual nameserver. The address must
be different from the host address. Default is the 3rd IP in the guest network,
i.e. x.x.x.3.


=item B<tftp=>I<dir>

When using the user mode network stack, activate a built-in TFTP
server. The files in I<dir> will be exposed as the root of a TFTP server.
The TFTP client on the guest must be configured in binary mode (use the command
C<bin> of the Unix TFTP client).


=item B<bootfile=>I<file>

When using the user mode network stack, broadcast I<file> as the BOOTP
filename. In conjunction with B<tftp>, this can be used to network boot
a guest from a local directory.

Example (using pxelinux):
	
	qemu -hda linux.img -boot n -net user,tftp=/path/to/tftp/files,bootfile=/pxelinux.0



=item B<smb=>I<dir>B<[,smbserver=>I<addr>B<]>

When using the user mode network stack, activate a built-in SMB
server so that Windows OSes can access to the host files in F<I<dir>>
transparently. The IP address of the SMB server can be set to I<addr>. By
default the 4th IP in the guest network is used, i.e. x.x.x.4.

In the guest Windows OS, the line:
	
	10.0.2.4 smbserver

must be added in the file F<C:\WINDOWS\LMHOSTS> (for windows 9x/Me)
or F<C:\WINNT\SYSTEM32\DRIVERS\ETC\LMHOSTS> (Windows NT/2000).

Then F<I<dir>> can be accessed in F<\smbserver\qemu>.

Note that a SAMBA server must be installed on the host OS in
F</usr/sbin/smbd>. QEMU was tested successfully with smbd versions from
Red Hat 9, Fedora Core 3 and OpenSUSE 11.x.


=item B<hostfwd=[tcp|udp]:[>I<hostaddr>B<]:>I<hostport>B<-[>I<guestaddr>B<]:>I<guestport>

Redirect incoming TCP or UDP connections to the host port I<hostport> to
the guest IP address I<guestaddr> on guest port I<guestport>. If
I<guestaddr> is not specified, its value is x.x.x.15 (default first address
given by the built-in DHCP server). By specifying I<hostaddr>, the rule can
be bound to a specific host interface. If no connection type is set, TCP is
used. This option can be given multiple times.

For example, to redirect host X11 connection from screen 1 to guest
screen 0, use the following:

	
	# on the host
	qemu -net user,hostfwd=tcp:127.0.0.1:6001-:6000 [...]
	# this host xterm should open in the guest X11 server
	xterm -display :1


To redirect telnet connections from host port 5555 to telnet port on
the guest, use the following:

	
	# on the host
	qemu -net user,hostfwd=tcp::5555-:23 [...]
	telnet localhost 5555


Then when you use on the host C<telnet localhost 5555>, you
connect to the guest telnet server.


=item B<guestfwd=[tcp]:>I<server>B<:>I<port>B<->I<dev>

Forward guest TCP connections to the IP address I<server> on port I<port>
to the character device I<dev>. This option can be given multiple times.


=back


Note: Legacy stand-alone options -tftp, -bootp, -smb and -redir are still
processed and applied to -net user. Mixing them with the new configuration
syntax gives undefined results. Their use for new applications is discouraged
as they will be removed from future versions.


=item B<-net tap[,vlan=>I<n>B<][,name=>I<name>B<][,fd=>I<h>B<][,ifname=>I<name>B<] [,script=>I<file>B<][,downscript=>I<dfile>B<]>

Connect the host TAP network interface I<name> to VLAN I<n>, use
the network script I<file> to configure it and the network script
I<dfile> to deconfigure it. If I<name> is not provided, the OS
automatically provides one. B<fd>=I<h> can be used to specify
the handle of an already opened host TAP interface. The default network
configure script is F</etc/qemu-ifup> and the default network
deconfigure script is F</etc/qemu-ifdown>. Use B<script=no>
or B<downscript=no> to disable script execution. Example:

	
	qemu linux.img -net nic -net tap


More complicated example (two NICs, each one connected to a TAP device)
	
	qemu linux.img -net nic,vlan=0 -net tap,vlan=0,ifname=tap0 \
	-net nic,vlan=1 -net tap,vlan=1,ifname=tap1



=item B<-net socket[,vlan=>I<n>B<][,name=>I<name>B<][,fd=>I<h>B<] [,listen=[>I<host>B<]:>I<port>B<][,connect=>I<host>B<:>I<port>B<]>


Connect the VLAN I<n> to a remote VLAN in another QEMU virtual
machine using a TCP socket connection. If B<listen> is
specified, QEMU waits for incoming connections on I<port>
(I<host> is optional). B<connect> is used to connect to
another QEMU instance using the B<listen> option. B<fd>=I<h>
specifies an already opened TCP socket.

Example:
	
	# launch a first QEMU instance
	qemu linux.img -net nic,macaddr=52:54:00:12:34:56 \
	-net socket,listen=:1234
	# connect the VLAN 0 of this instance to the VLAN 0
	# of the first instance
	qemu linux.img -net nic,macaddr=52:54:00:12:34:57 \
	-net socket,connect=127.0.0.1:1234



=item B<-net socket[,vlan=>I<n>B<][,name=>I<name>B<][,fd=>I<h>B<] [,mcast=>I<maddr>B<:>I<port>B<]>


Create a VLAN I<n> shared with another QEMU virtual
machines using a UDP multicast socket, effectively making a bus for
every QEMU with same multicast address I<maddr> and I<port>.
NOTES:

=over 4


=item 1.

Several QEMU can be running on different hosts and share same bus (assuming
correct multicast setup for these hosts).

=item 2.

mcast support is compatible with User Mode Linux (argument B<eth>I<N>B<=mcast>), see
E<lt>B<http://user-mode-linux.sf.net>E<gt>.

=item 3.

Use B<fd=h> to specify an already opened UDP multicast socket.

=back


Example:
	
	# launch one QEMU instance
	qemu linux.img -net nic,macaddr=52:54:00:12:34:56 \
	-net socket,mcast=230.0.0.1:1234
	# launch another QEMU instance on same "bus"
	qemu linux.img -net nic,macaddr=52:54:00:12:34:57 \
	-net socket,mcast=230.0.0.1:1234
	# launch yet another QEMU instance on same "bus"
	qemu linux.img -net nic,macaddr=52:54:00:12:34:58 \
	-net socket,mcast=230.0.0.1:1234


Example (User Mode Linux compat.):
	
	# launch QEMU instance (note mcast address selected
	# is UML's default)
	qemu linux.img -net nic,macaddr=52:54:00:12:34:56 \
	-net socket,mcast=239.192.168.1:1102
	# launch UML
	/path/to/linux ubd0=/path/to/root_fs eth0=mcast



=item B<-net vde[,vlan=>I<n>B<][,name=>I<name>B<][,sock=>I<socketpath>B<] [,port=>I<n>B<][,group=>I<groupname>B<][,mode=>I<octalmode>B<]>

Connect VLAN I<n> to PORT I<n> of a vde switch running on host and
listening for incoming connections on I<socketpath>. Use GROUP I<groupname>
and MODE I<octalmode> to change default ownership and permissions for
communication port. This option is available only if QEMU has been compiled
with vde support enabled.

Example:
	
	# launch vde switch
	vde_switch -F -sock /tmp/myswitch
	# launch QEMU instance
	qemu linux.img -net nic -net vde,sock=/tmp/myswitch



=item B<-net dump[,vlan=>I<n>B<][,file=>I<file>B<][,len=>I<len>B<]>

Dump network traffic on VLAN I<n> to file I<file> (F<qemu-vlan0.pcap> by default).
At most I<len> bytes (64k by default) per packet are stored. The file format is
libpcap, so it can be analyzed with tools such as tcpdump or Wireshark.


=item B<-net none>

Indicate that no network devices should be configured. It is used to
override the default configuration (B<-net nic -net user>) which
is activated if no B<-net> options are provided.


=back


Character device options:

The general form of a character device option is:

=over 4



=item B<-chardev> I<backend> B<,id=>I<id> B<[,mux=on|off] [,>I<options>B<]>

Backend is one of:
B<null>,
B<socket>,
B<udp>,
B<msmouse>,
B<vc>,
B<file>,
B<pipe>,
B<console>,
B<serial>,
B<pty>,
B<stdio>,
B<braille>,
B<tty>,
B<parport>.
The specific backend will determine the applicable options.

All devices must have an id, which can be any string up to 127 characters long.
It is used to uniquely identify this device in other command line directives.

A character device may be used in multiplexing mode by multiple front-ends.
The key sequence of B<Control-a> and B<c> will rotate the input focus
between attached front-ends. Specify B<mux=on> to enable this mode.

Options to each backend are described below.


=item B<-chardev null ,id=>I<id>

A void device. This device will not emit any data, and will drop any data it
receives. The null backend does not take any options.


=item B<-chardev socket ,id=>I<id> B<[>I<TCP options> B<or> I<unix options>B<] [,server] [,nowait] [,telnet]>


Create a two-way stream socket, which can be either a TCP or a unix socket. A
unix socket will be created if B<path> is specified. Behaviour is
undefined if TCP options are specified for a unix socket.

B<server> specifies that the socket shall be a listening socket.

B<nowait> specifies that QEMU should not block waiting for a client to
connect to a listening socket.

B<telnet> specifies that traffic on the socket should interpret telnet
escape sequences.

TCP and unix socket options are given below:


=over 4



=item B<TCP options: port=>I<port> B<[,host=>I<host>B<] [,to=>I<to>B<] [,ipv4] [,ipv6] [,nodelay]>


B<host> for a listening socket specifies the local address to be bound.
For a connecting socket species the remote host to connect to. B<host> is
optional for listening sockets. If not specified it defaults to C<0.0.0.0>.

B<port> for a listening socket specifies the local port to be bound. For a
connecting socket specifies the port on the remote host to connect to.
B<port> can be given as either a port number or a service name.
B<port> is required.

B<to> is only relevant to listening sockets. If it is specified, and
B<port> cannot be bound, QEMU will attempt to bind to subsequent ports up
to and including B<to> until it succeeds. B<to> must be specified
as a port number.

B<ipv4> and B<ipv6> specify that either IPv4 or IPv6 must be used.
If neither is specified the socket may use either protocol.

B<nodelay> disables the Nagle algorithm.


=item B<unix options: path=>I<path>


B<path> specifies the local path of the unix socket. B<path> is
required.


=back



=item B<-chardev udp ,id=>I<id> B<[,host=>I<host>B<] ,port=>I<port> B<[,localaddr=>I<localaddr>B<] [,localport=>I<localport>B<] [,ipv4] [,ipv6]>


Sends all traffic from the guest to a remote host over UDP.

B<host> specifies the remote host to connect to. If not specified it
defaults to C<localhost>.

B<port> specifies the port on the remote host to connect to. B<port>
is required.

B<localaddr> specifies the local address to bind to. If not specified it
defaults to C<0.0.0.0>.

B<localport> specifies the local port to bind to. If not specified any
available local port will be used.

B<ipv4> and B<ipv6> specify that either IPv4 or IPv6 must be used.
If neither is specified the device may use either protocol.


=item B<-chardev msmouse ,id=>I<id>


Forward QEMU's emulated msmouse events to the guest. B<msmouse> does not
take any options.


=item B<-chardev vc ,id=>I<id> B<[[,width=>I<width>B<] [,height=>I<height>B<]] [[,cols=>I<cols>B<] [,rows=>I<rows>B<]]>


Connect to a QEMU text console. B<vc> may optionally be given a specific
size.

B<width> and B<height> specify the width and height respectively of
the console, in pixels.

B<cols> and B<rows> specify that the console be sized to fit a text
console with the given dimensions.


=item B<-chardev file ,id=>I<id> B<,path=>I<path>


Log all traffic received from the guest to a file.

B<path> specifies the path of the file to be opened. This file will be
created if it does not already exist, and overwritten if it does. B<path>
is required.


=item B<-chardev pipe ,id=>I<id> B<,path=>I<path>


Create a two-way connection to the guest. The behaviour differs slightly between
Windows hosts and other hosts:

On Windows, a single duplex pipe will be created at
F<\.pipe\B<path>>.

On other hosts, 2 pipes will be created called F<B<path>.in> and
F<B<path>.out>. Data written to F<B<path>.in> will be
received by the guest. Data written by the guest can be read from
F<B<path>.out>. QEMU will not create these fifos, and requires them to
be present.

B<path> forms part of the pipe path as described above. B<path> is
required.


=item B<-chardev console ,id=>I<id>


Send traffic from the guest to QEMU's standard output. B<console> does not
take any options.

B<console> is only available on Windows hosts.


=item B<-chardev serial ,id=>I<id> B<,path=>B<path>


Send traffic from the guest to a serial device on the host.

B<serial> is
only available on Windows hosts.

B<path> specifies the name of the serial device to open.


=item B<-chardev pty ,id=>I<id>


Create a new pseudo-terminal on the host and connect to it. B<pty> does
not take any options.

B<pty> is not available on Windows hosts.


=item B<-chardev stdio ,id=>I<id> B<[,signal=on|off]>

Connect to standard input and standard output of the qemu process.

B<signal> controls if signals are enabled on the terminal, that includes
exiting QEMU with the key sequence B<Control-c>. This option is enabled by
default, use B<signal=off> to disable it.

B<stdio> is not available on Windows hosts.


=item B<-chardev braille ,id=>I<id>


Connect to a local BrlAPI server. B<braille> does not take any options.


=item B<-chardev tty ,id=>I<id> B<,path=>I<path>


Connect to a local tty device.

B<tty> is only available on Linux, Sun, FreeBSD, NetBSD, OpenBSD and
DragonFlyBSD hosts.

B<path> specifies the path to the tty. B<path> is required.


=item B<-chardev parport ,id=>I<id> B<,path=>I<path>


B<parport> is only available on Linux, FreeBSD and DragonFlyBSD hosts.

Connect to a local parallel port.

B<path> specifies the path to the parallel port device. B<path> is
required.


=back


Bluetooth(R) options:

=over 4



=item B<-bt hci[...]>

Defines the function of the corresponding Bluetooth HCI.  -bt options
are matched with the HCIs present in the chosen machine type.  For
example when emulating a machine with only one HCI built into it, only
the first C<-bt hci[...]> option is valid and defines the HCI's
logic.  The Transport Layer is decided by the machine type.  Currently
the machines C<n800> and C<n810> have one HCI and all other
machines have none.


The following three types are recognized:


=over 4


=item B<-bt hci,null>

(default) The corresponding Bluetooth HCI assumes no internal logic
and will not respond to any HCI commands or emit events.


=item B<-bt hci,host[:>I<id>B<]>

(C<bluez> only) The corresponding HCI passes commands / events
to / from the physical HCI identified by the name I<id> (default:
C<hci0>) on the computer running QEMU.  Only available on C<bluez>
capable systems like Linux.


=item B<-bt hci[,vlan=>I<n>B<]>

Add a virtual, standard HCI that will participate in the Bluetooth
scatternet I<n> (default C<0>).  Similarly to B<-net>
VLANs, devices inside a bluetooth network I<n> can only communicate
with other devices in the same network (scatternet).

=back



=item B<-bt vhci[,vlan=>I<n>B<]>

(Linux-host only) Create a HCI in scatternet I<n> (default 0) attached
to the host bluetooth stack instead of to the emulated target.  This
allows the host and target machines to participate in a common scatternet
and communicate.  Requires the Linux C<vhci> driver installed.  Can
be used as following:

	
	qemu [...OPTIONS...] -bt hci,vlan=5 -bt vhci,vlan=5



=item B<-bt device:>I<dev>B<[,vlan=>I<n>B<]>

Emulate a bluetooth device I<dev> and place it in network I<n>
(default C<0>).  QEMU can only emulate one type of bluetooth devices
currently:


=over 4


=item B<keyboard>

Virtual wireless keyboard implementing the HIDP bluetooth profile.

=back


=back


Linux/Multiboot boot specific:

When using these options, you can use a given Linux or Multiboot
kernel without installing it in the disk image. It can be useful
for easier testing of various kernels.


=over 4


=item B<-kernel> I<bzImage>

Use I<bzImage> as kernel image. The kernel can be either a Linux kernel
or in multiboot format.

=item B<-append> I<cmdline>

Use I<cmdline> as kernel command line

=item B<-initrd> I<file>

Use I<file> as initial ram disk.


=item B<-initrd ">I<file1> B<arg=foo,>I<file2>B<">


This syntax is only available with multiboot.

Use I<file1> and I<file2> as modules and pass arg=foo as parameter to the
first module.

=back


Debug/Expert options:

=over 4


=item B<-serial> I<dev>

Redirect the virtual serial port to host character device
I<dev>. The default device is C<vc> in graphical mode and
C<stdio> in non graphical mode.

This option can be used several times to simulate up to 4 serial
ports.

Use C<-serial none> to disable all serial ports.

Available character devices are:

=over 4


=item B<vc[:>I<W>B<x>I<H>B<]>

Virtual console. Optionally, a width and height can be given in pixel with
	
	vc:800x600

It is also possible to specify width or height in characters:
	
	vc:80Cx24C


=item B<pty>

[Linux only] Pseudo TTY (a new PTY is automatically allocated)

=item B<none>

No device is allocated.

=item B<null>

void device

=item B</dev/XXX>

[Linux only] Use host tty, e.g. F</dev/ttyS0>. The host serial port
parameters are set according to the emulated ones.

=item B</dev/parport>I<N>

[Linux only, parallel port only] Use host parallel port
I<N>. Currently SPP and EPP parallel port features can be used.

=item B<file:>I<filename>

Write output to I<filename>. No character can be read.

=item B<stdio>

[Unix only] standard input/output

=item B<pipe:>I<filename>

name pipe I<filename>

=item B<COM>I<n>

[Windows only] Use host serial port I<n>

=item B<udp:[>I<remote_host>B<]:>I<remote_port>B<[@[>I<src_ip>B<]:>I<src_port>B<]>

This implements UDP Net Console.
When I<remote_host> or I<src_ip> are not specified
they default to C<0.0.0.0>.
When not using a specified I<src_port> a random port is automatically chosen.

If you just want a simple readonly console you can use C<netcat> or
C<nc>, by starting qemu with: C<-serial udp::4555> and nc as:
C<nc -u -l -p 4555>. Any time qemu writes something to that port it
will appear in the netconsole session.

If you plan to send characters back via netconsole or you want to stop
and start qemu a lot of times, you should have qemu use the same
source port each time by using something like C<-serial
udp::4555@4556> to qemu. Another approach is to use a patched
version of netcat which can listen to a TCP port and send and receive
characters via udp.  If you have a patched version of netcat which
activates telnet remote echo and single char transfer, then you can
use the following options to step up a netcat redirector to allow
telnet on port 5555 to access the qemu port.

=over 4


=item C<Qemu Options:>

-serial udp::4555@4556

=item C<netcat options:>

-u -P 4555 -L 0.0.0.0:4556 -t -p 5555 -I -T

=item C<telnet options:>

localhost 5555

=back



=item B<tcp:[>I<host>B<]:>I<port>B<[,>I<server>B<][,nowait][,nodelay]>

The TCP Net Console has two modes of operation.  It can send the serial
I/O to a location or wait for a connection from a location.  By default
the TCP Net Console is sent to I<host> at the I<port>.  If you use
the I<server> option QEMU will wait for a client socket application
to connect to the port before continuing, unless the C<nowait>
option was specified.  The C<nodelay> option disables the Nagle buffering
algorithm.  If I<host> is omitted, 0.0.0.0 is assumed. Only
one TCP connection at a time is accepted. You can use C<telnet> to
connect to the corresponding character device.

=over 4


=item C<Example to send tcp console to 192.168.0.2 port 4444>

-serial tcp:192.168.0.2:4444

=item C<Example to listen and wait on port 4444 for connection>

-serial tcp::4444,server

=item C<Example to not wait and listen on ip 192.168.0.100 port 4444>

-serial tcp:192.168.0.100:4444,server,nowait

=back



=item B<telnet:>I<host>B<:>I<port>B<[,server][,nowait][,nodelay]>

The telnet protocol is used instead of raw tcp sockets.  The options
work the same as if you had specified C<-serial tcp>.  The
difference is that the port acts like a telnet server or client using
telnet option negotiation.  This will also allow you to send the
MAGIC_SYSRQ sequence if you use a telnet that supports sending the break
sequence.  Typically in unix telnet you do it with Control-] and then
type "send break" followed by pressing the enter key.


=item B<unix:>I<path>B<[,server][,nowait]>

A unix domain socket is used instead of a tcp socket.  The option works the
same as if you had specified C<-serial tcp> except the unix domain socket
I<path> is used for connections.


=item B<mon:>I<dev_string>

This is a special option to allow the monitor to be multiplexed onto
another serial port.  The monitor is accessed with key sequence of
B<Control-a> and then pressing B<c>. See monitor access
B<pcsys_keys> in the -nographic section for more keys.
I<dev_string> should be any one of the serial devices specified
above.  An example to multiplex the monitor onto a telnet server
listening on port 4444 would be:

=over 4


=item C<-serial mon:telnet::4444,server,nowait>


=back



=item B<braille>

Braille device.  This will use BrlAPI to display the braille output on a real
or fake device.


=item B<msmouse>

Three button serial mouse. Configure the guest to use Microsoft protocol.

=back


=item B<-parallel> I<dev>

Redirect the virtual parallel port to host device I<dev> (same
devices as the serial port). On Linux hosts, F</dev/parportN> can
be used to use hardware devices connected on the corresponding host
parallel port.

This option can be used several times to simulate up to 3 parallel
ports.

Use C<-parallel none> to disable all parallel ports.

=item B<-monitor> I<dev>

Redirect the monitor to host device I<dev> (same devices as the
serial port).
The default device is C<vc> in graphical mode and C<stdio> in
non graphical mode.

=item B<-qmp> I<dev>

Like -monitor but opens in 'control' mode.

=item B<-mon chardev=[name][,mode=readline|control][,default]>

Setup monitor on chardev I<name>.

=item B<-debugcon> I<dev>

Redirect the debug console to host device I<dev> (same devices as the
serial port).  The debug console is an I/O port which is typically port
0xe9; writing to that I/O port sends output to this device.
The default device is C<vc> in graphical mode and C<stdio> in
non graphical mode.

=item B<-pidfile> I<file>

Store the QEMU process PID in I<file>. It is useful if you launch QEMU
from a script.

=item B<-singlestep>

Run the emulation in single step mode.

=item B<-S>

Do not start CPU at startup (you must type 'c' in the monitor).

=item B<-gdb> I<dev>

Wait for gdb connection on device I<dev>. Typical
connections will likely be TCP-based, but also UDP, pseudo TTY, or even
stdio are reasonable use case. The latter is allowing to start qemu from
within gdb and establish the connection via a pipe:
	
	(gdb) target remote | exec qemu -gdb stdio ...


=item B<-s>

Shorthand for -gdb tcp::1234, i.e. open a gdbserver on TCP port 1234.

=item B<-d>

Output log in /tmp/qemu.log

=item B<-hdachs> I<c>B<,>I<h>B<,>I<s>B<,[,>I<t>B<]>

Force hard disk 0 physical geometry (1 E<lt>= I<c> E<lt>= 16383, 1 E<lt>=
I<h> E<lt>= 16, 1 E<lt>= I<s> E<lt>= 63) and optionally force the BIOS
translation mode (I<t>=none, lba or auto). Usually QEMU can guess
all those parameters. This option is useful for old MS-DOS disk
images.

=item B<-L>  I<path>

Set the directory for the BIOS, VGA BIOS and keymaps.

=item B<-bios> I<file>

Set the filename for the BIOS.

=item B<-enable-kvm>

Enable KVM full virtualization support. This option is only available
if KVM support is enabled when compiling.

=item B<-xen-domid> I<id>

Specify xen guest domain I<id> (XEN only).

=item B<-xen-create>

Create domain using xen hypercalls, bypassing xend.
Warning: should not be used when xend is in use (XEN only).

=item B<-xen-attach>

Attach to existing xen domain.
xend will use this when starting qemu (XEN only).

=item B<-no-reboot>

Exit instead of rebooting.

=item B<-no-shutdown>

Don't exit QEMU on guest shutdown, but instead only stop the emulation.
This allows for instance switching to monitor to commit changes to the
disk image.

=item B<-loadvm> I<file>

Start right away with a saved state (C<loadvm> in monitor)

=item B<-daemonize>

Daemonize the QEMU process after initialization.  QEMU will not detach from
standard IO until it is ready to receive connections on any of its devices.
This option is a useful way for external programs to launch QEMU without having
to cope with initialization race conditions.

=item B<-option-rom> I<file>

Load the contents of I<file> as an option ROM.
This option is useful to load things like EtherBoot.

=item B<-clock> I<method>

Force the use of the given methods for timer alarm. To see what timers
are available use -clock ?.


=item B<-rtc [base=utc|localtime|>I<date>B<][,clock=host|vm][,driftfix=none|slew]>

Specify B<base> as C<utc> or C<localtime> to let the RTC start at the current
UTC or local time, respectively. C<localtime> is required for correct date in
MS-DOS or Windows. To start at a specific point in time, provide I<date> in the
format C<2006-06-17T16:01:21> or C<2006-06-17>. The default base is UTC.

By default the RTC is driven by the host system time. This allows to use the
RTC as accurate reference clock inside the guest, specifically if the host
time is smoothly following an accurate external reference clock, e.g. via NTP.
If you want to isolate the guest time from the host, even prevent it from
progressing during suspension, you can set B<clock> to C<vm> instead.

Enable B<driftfix> (i386 targets only) if you experience time drift problems,
specifically with Windows' ACPI HAL. This option will try to figure out how
many timer interrupts were not processed by the Windows guest and will
re-inject them.

=item B<-icount [>I<N>B<|auto]>

Enable virtual instruction counter.  The virtual cpu will execute one
instruction every 2^I<N> ns of virtual time.  If C<auto> is specified
then the virtual cpu speed will be automatically adjusted to keep virtual
time within a few seconds of real time.

Note that while this option can give deterministic behavior, it does not
provide cycle accurate emulation.  Modern CPUs contain superscalar out of
order cores with complex cache hierarchies.  The number of instructions
executed often has little or no correlation with actual performance.

=item B<-watchdog> I<model>

Create a virtual hardware watchdog device.  Once enabled (by a guest
action), the watchdog must be periodically polled by an agent inside
the guest or else the guest will be restarted.

The I<model> is the model of hardware watchdog to emulate.  Choices
for model are: C<ib700> (iBASE 700) which is a very simple ISA
watchdog with a single timer, or C<i6300esb> (Intel 6300ESB I/O
controller hub) which is a much more featureful PCI-based dual-timer
watchdog.  Choose a model for which your guest has drivers.

Use C<-watchdog ?> to list available hardware models.  Only one
watchdog can be enabled for a guest.

=item B<-watchdog-action> I<action>


The I<action> controls what QEMU will do when the watchdog timer
expires.
The default is
C<reset> (forcefully reset the guest).
Other possible actions are:
C<shutdown> (attempt to gracefully shutdown the guest),
C<poweroff> (forcefully poweroff the guest),
C<pause> (pause the guest),
C<debug> (print a debug message and continue), or
C<none> (do nothing).

Note that the C<shutdown> action requires that the guest responds
to ACPI signals, which it may not be able to do in the sort of
situations where the watchdog would have expired, and thus
C<-watchdog-action shutdown> is not recommended for production use.

Examples:


=over 4


=item C<-watchdog i6300esb -watchdog-action pause>


=item C<-watchdog ib700>


=back



=item B<-echr> I<numeric_ascii_value>

Change the escape character used for switching to the monitor when using
monitor and serial sharing.  The default is C<0x01> when using the
C<-nographic> option.  C<0x01> is equal to pressing
C<Control-a>.  You can select a different character from the ascii
control keys where 1 through 26 map to Control-a through Control-z.  For
instance you could use the either of the following to change the escape
character to Control-t.

=over 4


=item C<-echr 0x14>


=item C<-echr 20>


=back


=item B<-virtioconsole> I<c>

Set virtio console.

This option is maintained for backward compatibility.

Please use C<-device virtconsole> for the new way of invocation.

=item B<-show-cursor>

Show cursor.

=item B<-tb-size> I<n>

Set TB size.

=item B<-incoming> I<port>

Prepare for incoming migration, listen on I<port>.

=item B<-nodefaults>

Don't create default devices.

=item B<-chroot> I<dir>

Immediately before starting guest execution, chroot to the specified
directory.  Especially useful in combination with -runas.

=item B<-runas> I<user>

Immediately before starting guest execution, drop root privileges, switching
to the specified user.

=item B<-prom-env> I<variable>B<=>I<value>

Set OpenBIOS nvram I<variable> to given I<value> (PPC, SPARC only).

=item B<-semihosting>

Semihosting mode (ARM, M68K only).

=item B<-old-param>

Old param mode (ARM only).

=item B<-readconfig> I<file>

Read device configuration from I<file>.

=item B<-writeconfig> I<file>

Write device configuration to I<file>.

=item B<-nodefconfig>

Normally QEMU loads a configuration file from I<sysconfdir>/qemu.conf and
I<sysconfdir>/target-I<ARCH>.conf on startup.  The C<-nodefconfig>
option will prevent QEMU from loading these configuration files at startup.

=back



During the graphical emulation, you can use the following keys:

=over 4


=item B<Ctrl-Alt-f>

Toggle full screen


=item B<Ctrl-Alt-u>

Restore the screen's un-scaled dimensions


=item B<Ctrl-Alt-n>

Switch to virtual console 'n'. Standard console mappings are:

=over 4


=item I<1>

Target system display

=item I<2>

Monitor

=item I<3>

Serial port

=back



=item B<Ctrl-Alt>

Toggle mouse and keyboard grab.

=back


In the virtual consoles, you can use B<Ctrl-Up>, B<Ctrl-Down>,
B<Ctrl-PageUp> and B<Ctrl-PageDown> to move in the back log.

During emulation, if you are using the B<-nographic> option, use
B<Ctrl-a h> to get terminal commands:


=over 4


=item B<Ctrl-a h>


=item B<Ctrl-a ?>

Print this help

=item B<Ctrl-a x>

Exit emulator

=item B<Ctrl-a s>

Save disk data back to file (if -snapshot)

=item B<Ctrl-a t>

Toggle console timestamps

=item B<Ctrl-a b>

Send break (magic sysrq in Linux)

=item B<Ctrl-a c>

Switch between console and monitor

=item B<Ctrl-a Ctrl-a>

Send Ctrl-a

=back


The following options are specific to the PowerPC emulation:


=over 4



=item B<-g> I<W>B<x>I<H>B<[x>I<DEPTH>B<]>


Set the initial VGA graphic mode. The default is 800x600x15.


=item B<-prom-env> I<string>


Set OpenBIOS variables in NVRAM, for example:

	
	qemu-system-ppc -prom-env 'auto-boot?=false' \
	 -prom-env 'boot-device=hd:2,\yaboot' \
	 -prom-env 'boot-args=conf=hd:2,\yaboot.conf'


These variables are not used by Open Hack'Ware.


=back



The following options are specific to the Sparc32 emulation:


=over 4



=item B<-g> I<W>B<x>I<H>B<x[x>I<DEPTH>B<]>


Set the initial TCX graphic mode. The default is 1024x768x8, currently
the only other possible mode is 1024x768x24.


=item B<-prom-env> I<string>


Set OpenBIOS variables in NVRAM, for example:

	
	qemu-system-sparc -prom-env 'auto-boot?=false' \
	 -prom-env 'boot-device=sd(0,2,0):d' -prom-env 'boot-args=linux single'



=item B<-M [SS-4|SS-5|SS-10|SS-20|SS-600MP|LX|Voyager|SPARCClassic] [|SPARCbook|SS-2|SS-1000|SS-2000]>


Set the emulated machine type. Default is SS-5.


=back



The following options are specific to the Sparc64 emulation:


=over 4



=item B<-prom-env> I<string>


Set OpenBIOS variables in NVRAM, for example:

	
	qemu-system-sparc64 -prom-env 'auto-boot?=false'



=item B<-M [sun4u|sun4v|Niagara]>


Set the emulated machine type. The default is sun4u.


=back



=head1 SEE ALSO

The HTML documentation of QEMU for more precise information and Linux
user mode emulator invocation.

=head1 AUTHOR

Fabrice Bellard

